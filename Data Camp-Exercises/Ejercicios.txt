Introduction to SQL
SQL = Structured Query Language
SQL is a language for interacting with data stored in something called a relational database, which is a kind of a collection of tables. A table is just a set of rows and columns, like a spredsheet, which represents exactly one type of entity.

For example, a table might represent employees in a company or purchases made, but not both.
The ROWS of a table can also be called RECORD.
The COLUMNS of a table can also be called FIELD.

In a table representing employees, each RECORD represents a single person. Each FIELD of a table contains a single attribute for all rows in the table.
We also count the index as a column or field


QUERY is a request for DATA from a database table (or combination of tables).

In SQL, you can select data from a table using a SELECT statement.

Basic operator

In capital letters we have the coding instructions, in lowercase we have, first what we want to select: name (first column of the page we are searching. Then we specify the page: people. 

SELECT name FROM people;


Also SELECT it's used to print something in the console as long as the folowing words are between quotation marks

KEYWORDS:

Often your results will include many duplicate values. If you want to select all the unique values from a column, you can use the DISTINCT keyword.

What if you want to count the number of employees in your employees table? The COUNT statement lets you do this by returning the number of rows in one or more columns.


Exercises_ 1

SELECT name, birthdate FROM people;
SELECT * FROM people;
SELECT * FROM people
LIMIT 10;

SELECT title, release_year
FROM films;

SELECT title, release_year, country
FROM films;

Exercise_2

SELECT DISTINCT language
FROM films;

SELECT DISTINCT certification
FROM films;

SELECT DISTINCT role
FROM roles;

Exercise_3

SELECT COUNT(*)
FROM people;
SELECT COUNT(*)
FROM reviews;

SELECT COUNT(birthdate)
FROM people;
SELECT COUNT(DISTINCT birthdate)
FROM people;

SELECT COUNT(*)
FROM people;

SELECT COUNT(birthdate)
FROM people;

SELECT COUNT(DISTINCT birthdate)
FROM people;

SELECT COUNT(DISTINCT language)
FROM films;
SELECT COUNT(DISTINCT country)
FROM films;


Filtering results
Congrats on finishing the first chapter! You now know how to select columns and perform basic counts. This chapter will focus on filtering your results.

In SQL, the WHERE keyword allows you to filter based on both text and numeric values in a table. There are a few different comparison operators you can use:

= equal
<> not equal
< less than
> greater than
<= less than or equal to
>= greater than or equal to
For example, you can filter text records such as title. The following code returns all films with the title 'Metropolis':

SELECT title
FROM films
WHERE title = 'Metropolis';
Notice that the WHERE clause always comes after the FROM statement!

Note that in this course we will use <> and not != for the not equal operator, as per the SQL standard.


EXERCISE 

SELECT *
FROM films
WHERE budget > 1000;
SELECT *
FROM films
WHERE release_year = 2016;


Get the number of films released before 2000.
SELECT COUNT(*)
FROM films
WHERE release_year < 2000;

Get the title and release year of films released after 2000.
SELECT title, release_year
FROM films
WHERE release_year > 2000

Get all details for all French language films.
SELECT *
FROM films
WHERE language = 'French';

Get the name and birth date of the person born on November 11th, 1974. Remember to use ISO date format ('1974-11-11')!
SELECT name, birthdate
FROM people
WHERE birthdate = '1974-11-11';

Get the number of Hindi language films.
SELECT COUNT(*)
FROM films
WHERE language = 'Hindi'

Get all details for all films with an R certification.
SELECT *
FROM films
WHERE certification = 'R'




Often, you'll want to select data based on multiple conditions. You can build up your WHERE queries by combining multiple conditions with the AND keyword.
SELECT title
FROM films
WHERE release_year > 1994
AND release_year < 2000;


1-Get the title and release year for all Spanish language films released before 2000.
SELECT TITLE, release_year
FROM films
WHERE language = 'Spanish'
AND release_year < 2000;


2-Get all details for Spanish language films released after 2000.
SELECT *
FROM films
WHERE language = 'Spanish'
AND release_year > 2000;


Get all details for Spanish language films released after 2000, but before 2010.
SELECT *
FROM films
WHERE language = 'Spanish'
AND release_year > 2000
AND release_year < 2010;



What if you want to select rows based on multiple conditions where some but not all of the conditions need to be met? For this, SQL has the OR operator.

For example, the following returns all films released in either 1994 or 2000:
SELECT title
FROM films
WHERE release_year = 1994
OR release_year = 2000;


Note that you need to specify the column for every OR condition, so the following is invalid:
SELECT title
FROM films
WHERE release_year = 1994 OR 2000;

When combining AND and OR, be sure to enclose the individual clauses in parentheses, like so:
SELECT title
FROM films
WHERE (release_year = 1994 OR release_year = 1995)
AND (certification = 'PG' OR certification = 'R');



Now you'll write a query to get the title and release year of films released in the 90s which were in French or Spanish and which took in more than $2M gross.

SELECT title, release_year
FROM films
WHERE (release_year >= 1990 AND release_year < 2000 AND gross >= 2000000)
AND (language ='Spanish' OR language = 'French')

Checking for ranges like this is very common, so in SQL the BETWEEN keyword provides a useful shorthand for filtering values within a specified range (extrem inclusive). This query is equivalent to the one above:

SELECT title
FROM films
WHERE release_year
BETWEEN 1994 AND 2000;


Take a go at using BETWEEN with AND on the films data to get the title and release year of all Spanish language films released between 1990 and 2000 (inclusive) with budgets over $100 million. We have broken the problem into smaller steps so that you can build the query as you go along!
SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000
AND (language = 'Spanish' OR language = 'French');


Enter the IN operator! The IN operator allows you to specify multiple values in a WHERE clause, making it easier and quicker to specify multiple OR conditions! Neat, right?
SELECT title, release_year
FROM films
WHERE release_year IN (1990,2000)
AND duration  > 120;

SELECT title, release_year
FROM films
WHERE release_year BETWEEN 1990 AND 2000
AND budget > 100000000
AND (language = 'Spanish' OR language = 'French');

SELECT title, certification
FROM films
WHERE certification IN ('NC-17', 'R');




In SQL, NULL represents a missing or unknown value. You can check for NULL values using the expression IS NULL. For example, to count the number of missing birth dates in the people table:
SELECT COUNT(*)
FROM people
WHERE birthdate IS NULL;


Sometimes, you'll want to filter out missing values so you only get results which are not NULL. To do this, you can use the IS NOT NULL operator.


Get the names of people who are still alive, i.e. whose death date is missing.
SELECT name
FROM people
WHERE deathdate IS NULL;

Get the title of every film which doesn't have a budget associated with it.
SELECT title 
FROM films
WHERE budget IS NULL;


Get the number of films which don't have a language associated with them.
SELECT COUNT(*)
FROM films
WHERE language IS NULL


In SQL, the LIKE operator can be used in a WHERE clause to search for a pattern in a column. To accomplish this, you use something called a wildcard as a placeholder for some other values. There are two wildcards you can use with LIKE:

The % wildcard will match zero, one, or many characters in text. For example, the following query matches companies like 'Data', 'DataC' 'DataCamp', 'DataMind', and so on:
SELECT name
FROM companies
WHERE name LIKE 'Data%';

The _ wildcard will match a single character. For example, the following query matches companies like 'DataCamp', 'DataComp', and so on:
SELECT name
FROM companies
WHERE name LIKE 'DataC_mp';

You can also use the NOT LIKE operator to find records that don't match the pattern you specify.


Ex 
Get the names of all people whose names begin with 'B'.
SELECT name
FROM people
WHERE name LIKE 'B%'


Get the names of people whose names have 'r' as the second letter.
SELECT name
FROM people
WHERE name LIKE '_r%';

Get the names of people whose names don't start with A. 
SELECT name
FROM people
WHERE name NOT LIKE 'A%'

Aggregate functions
For example,

SELECT AVG(budget)
FROM films;
gives you the average value from the budget column of the films table. Similarly, the MAX function returns the highest budget:
SELECT MAX(budget) --> It also have the MIN function
FROM films;

The SUM function returns the result of adding up the numeric values in a column:
SELECT SUM(budget)
FROM films;



Use the SUM function to get the total duration of all films.
SELECT SUM(duration)
FROM films;

Get the average duration of all films.
SELECT AVG(duration)
FROM films;

Get the duration of the shortest film.
SELECT MIN(duration)
FROM films;

Get the duration of the longest film.
SELECT MAX(duration)
FROM films;


Use the SUM function to get the total amount grossed by all films.
SELECT SUM(gross)
FROM films;

Get the average amount grossed by all films.
SELECT AVG(gross)
FROM films;

Get the amount grossed by the worst performing film.
SELECT MIN(gross)
FROM films;

Get the amount grossed by the best performing film.
SELECT MAX(gross)
FROM films;


SELECT * 
FROM films
WHERE gross >= 400000000
AND release_year >= 2000
ORDER BY gross DESC




Use the SUM function to get the total amount grossed by all films made in the year 2000 or later.
SELECT SUM(gross)
FROM films
WHERE release_year >= 2000

Get the average amount grossed by all films whose titles start with the letter 'A'.
SELECT AVG(gross)
FROM films
WHERE title LIKE 'A%';


Get the amount grossed by the worst performing film in 1994.
SELECT MIN(gross)
FROM films
WHERE release_year = 1994;

Get the amount grossed by the best performing film between 2000 and 2012, inclusive.

SELECT MAX(gross)
FROM films
WHERE release_year
BETWEEN 2000 AND 2012;




In addition to using aggregate functions, you can perform basic arithmetic with symbols like +, -, *, and /.

So, for example, this gives a result of 12:

SELECT (4 * 3);
However, the following gives a result of 1:

SELECT (4 / 3);
What's going on here?

SQL assumes that if you divide an integer by an integer, you want to get an integer back. So be careful when dividing!

If you want more precision when dividing, you can add decimal places to your numbers. For example,

SELECT (4.0 / 3.0) AS result;
gives you the result you would expect: 1.333.


To avoid situations like this, SQL allows you to do something called aliasing. Aliasing simply means you assign a temporary name to something. To alias, you use the AS keyword, which you've already seen earlier in this course.

For example, in the above example we could use aliases to make the result clearer:

SELECT MAX(budget) AS max_budget,
       MAX(duration) AS max_duration
FROM films;


Get the title and net profit (the amount a film grossed, minus its budget) for all films. Alias the net profit as net_profit.
SELECT title,
       gross - budget AS net_profit
FROM films;



Get the title and duration in hours for all films. The duration is in minutes, so you'll need to divide by 60.0 to get the duration in hours. Alias the duration in hours as duration_hours.
SELECT title, 
        duration / 60.0 AS duration_hours
FROM films;

Get the average duration in hours for all films, aliased as avg_duration_hours
SELECT AVG(duration)/60.0 AS avg_duration_hours
FROM films;



Even more aliasing
Let's practice your newfound aliasing skills some more before moving on!

Recall: SQL assumes that if you divide an integer by an integer, you want to get an integer back.

This means that the following will erroneously result in 400.0:

SELECT 45 / 10 * 100.0;
This is because 45 / 10 evaluates to an integer (4), and not a decimal number like we would expect.

So when you're dividing make sure at least one of your numbers has a decimal place:

SELECT 45 * 100.0 / 10;
The above now gives the correct answer of 450.0 since the numerator (45 * 100.0) of the division is now a decimal!






Get the percentage of people who are no longer alive. Alias the result as percentage_dead.
-- get the count(deathdate) and multiply by 100.0
-- then divide by count(*)
SELECT COUNT(deathdate) * 100.0 / COUNT(*) AS percentage_dead
FROM people;
-- So in a normal ratio calculus we will made nºof dead people / nº of people * 100
-- If we do that in SQL we won't get a decimal number, and that's exactly what we want

Get the number of years between the newest film and oldest film. Alias the result as difference
SELECT MAX(release_year)-MIN(release_year) AS difference
FROM films;

Get the number of decades the films table covers. Alias the result as number_of_decades.
SELECT (MAX(release_year)-MIN(release_year))/10.0 AS number_of_decades
FROM films;








In SQL, the ORDER BY keyword is used to sort results in ascending or descending order according to the values of one or more columns.

By default ORDER BY will sort in ascending order. If you want to sort the results in descending order, you can use the DESC keyword. For example,

SELECT title
FROM films
ORDER BY release_year DESC;
gives you the titles of films sorted by release year, from newest to oldest.

Strings are orderes alphabetical.



Get the names of people from the people table, sorted alphabetically.
SELECT name
FROM people
ORDER BY name;

Get the names of people, sorted by birth date.
SELECT name
FROM people
ORDER BY birthdate;

Get the birth date and name for every person, in order of when they were born.
SELECT name, birthdate
FROM people
ORDER BY birthdate;

Get the title of films released in 2000 or 2012, in the order they were released
SELECT title
FROM films
WHERE release_year in (2000, 2012)
ORDER BY release_year;

Get all details for all films except those released in 2015 and order them by duration.
SELECT *
FROM films
WHERE release_year <> 2015
ORDER BY duration;

Get the title and gross earnings for movies which begin with the letter 'M' and order the results alphabetically.
SELECT title, gross
FROM films
WHERE title LIKE 'M%'
ORDER BY title;

Get the IMDB score and film ID for every film from the reviews table, sorted from highest to lowest score.
SELECT imdb_score, film_id
FROM reviews
ORDER BY imdb_score DESC;

Get the title for every film, in reverse order.
SELECT title
FROM films
ORDER BY title DESC;

Get the title and duration for every film, in order of longest duration to shortest.
SELECT title, duration
FROM films 
ORDER BY duration DESC;




Sorting multiple columns
ORDER BY can also be used to sort on multiple columns. It will sort by the first column specified, then sort by the next, then the next, and so on. For example,

SELECT birthdate, name
FROM people
ORDER BY birthdate, name;
sorts on birth dates first (oldest to newest) and then sorts on the names in alphabetical order. The order of columns is important!

Try using ORDER BY to sort multiple columns! Remember, to specify multiple columns you separate the column names with a com



Get the birth date and name of people in the people table, in order of when they were born and alphabetically by name
SELECT birthdate, name 
FROM people
ORDER BY birthdate, name;

Get the release year, duration, and title of films ordered by their release year and duration.
SELECT release_year, duration, title
FROM films
ORDER BY release_year, duration;

Get certifications, release years, and titles of films ordered by certification (alphabetically) and release year.
SELECT certification, release_year, title
FROM films
ORDER BY certification, release_year;


Get the names and birthdates of people ordered by name and birth date.
SELECT name, birthdate
FROM people
ORDER BY name, birthdate








GROUP BY
Now you know how to sort results! Often you'll need to aggregate results. For example, you might want to count the number of male and female employees in your company. Here, what you want is to group all the males together and count them, and group all the females together and count them. In SQL, GROUP BY allows you to group a result by one or more columns, like so:

SELECT sex, count(*)
FROM employees
GROUP BY sex;


Commonly, GROUP BY is used with aggregate functions like COUNT() or MAX(). Note that GROUP BY always goes after the FROM clause!

A word of warning: SQL will return an error if you try to SELECT a field that is not in your GROUP BY clause without using it to calculate some kind of value about the entire group.

Get the release year and count of films released in each year.
SELECT release_year, COUNT(*)
FROM films
GROUP BY release_year
ORDER BY release_year DESC;

Get the release year and average duration of all films, grouped by release year.
SELECT release_year, AVG(duration)
FROM films
GROUP BY release_year
ORDER BY release_year DESC;

Get the release year and largest budget for all films, grouped by release year.
SELECT release_year, MAX(budget) AS mas_budget_year
FROM films
GROUP BY release_year
ORDER BY release_year DESC;

Get the IMDB score and count of film reviews grouped by IMDB score in the reviews table.
SELECT imdb_score, COUNT(*) AS num_films
FROM reviews
GROUP BY imdb_score
ORDER BY imdb_score DESC;

Get the release year and lowest gross earnings per release year.
SELECT release_year, MIN(gross)
FROM films
GROUP BY release_year
ORDER BY release_year DESC;

Get the language and total gross amount films in each language made.
SELECT language, SUM(gross)
FROM films
GROUP BY language
ORDER BY SUM(gross) DESC;

Get the country and total budget spent making movies in each country.
SELECT country, SUM(budget)
FROM films
GROUP BY country
ORDER BY SUM(budget) DESC;

Get the release year, country, and highest budget spent making a film for each year, for each country. Sort your results by release year and country.
SELECT release_year, country, MAX(budget)
FROM films
GROUP BY country, release_year
ORDER BY release_year, country;

Get the country, release year, and lowest amount grossed per release year per country. Order your results by country and release year.
SELECT country, release_year, MIN(gross)
FROM films
GROUP BY release_year, country
ORDER BY country, release_year;



This means that if you want to filter based on the result of an aggregate function, you need another way! That's where the HAVING clause comes in. For example,

SELECT release_year
FROM films
GROUP BY release_year
HAVING COUNT(title) > 10;
shows only those years in which more than 10 films were released.

Now you're going to write a query that returns the average budget and average gross earnings for films in each year after 1990, if the average budget is greater than $60 million.
SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) avg_gross
FROM films
GROUP BY release_year
HAVING release_year > 1990 
AND AVG(budget)>60000000
ORDER BY avg_gross DESC;


Get the country, average budget, and average gross take of countries that have made more than 10 films. Order the result by country name, and limit the number of results displayed to 5. You should alias the averages as avg_budget and avg_gross respectively.
SELECT country, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM films
GROUP BY country
HAVING COUNT(title) > 10
ORDER BY country
LIMIT 5;






There's one more concept we're going to introduce. You may have noticed that all your results so far have been from just one table, e.g. films or people.

In the real world however, you will often want to query multiple tables. For example, what if you want to see the IMDB score for a particular movie?

In this case, you'd want to get the ID of the movie from the films table and then use it to get IMDB information from the reviews table. In SQL, this concept is known as a join, and a basic join is shown in the editor to the right.

The query in the editor gets the IMDB score for the film To Kill a Mockingbird! Cool right?

